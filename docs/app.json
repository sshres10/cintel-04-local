[{"name": "app.py", "content": "# Import necessary libraries\nimport plotly.express as px\nfrom shiny.express import input, ui, render\nfrom shinywidgets import render_plotly\nfrom shiny import reactive\nimport palmerpenguins  # This package provides the Palmer Penguins dataset\n\n# Use the built-in function to load the Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\n\n# Set page options with a title and make the layout fillable\nui.page_opts(title=\"Penguin Data Shrestha\", fillable=True)\n\n# Create a sidebar that is open by default\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar_Shrestha\")  # Add a second-level header to the sidebar\n    ui.input_selectize(\n        \"selected_attribute\",  # Name of the input\n        \"Choose a column:\",  # Label for the dropdown\n        choices=[\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n        selected=\"bill_length_mm\", \n    )\n    ui.input_numeric(\n        \"plotly_bin_count\",  # Name of the input\n        \"Histogram Bin Count(Plotly Scatterplot: Species\",  # Label for the numeric input\n        value=10,  # Adding a default value for clarity\n    )\n    ui.input_slider(\n        \"seaborn_bin_count\",  # Name of the input\n        \"Number of bins for Seaborn histogram\",  # Label for the slider\n        min=1,  # Minimum value for the slider\n        max=50,  # Maximum value for the slider\n        value=10,  # Default value for the slider\n    )\n    ui.input_checkbox_group(\n        \"selected_species\",  # Name of the input\n        \"Filter by species:\",  # Label for the checkbox group\n        choices=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],  # Checkbox options\n        selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],  # Default selected options\n        inline=False,  # Display the checkboxes inline or stacked (True/False)\n    )\n    ui.hr()  # Text for the hyperlink\n    ui.a(\n        \"GitHub\", href=\"https://github.com/sshres10/cintel-03-reactive\", target=\"_blank\"\n    )  # Open the link in a new tab\n\n# Define a consistent color scheme for plots\ncolor_discrete_map = {\n    \"Adelie\": \"#1f77b4\",  # blue\n    \"Gentoo\": \"#ff7f0e\",  # orange\n    \"Chinstrap\": \"#2ca02c\",  # green\n}\nwith ui.layout_columns():  # Define the main layout of the page with two columns\n    # Histogram Plot 1\n    @render_plotly\n    def plot1():\n        df = filtered_data()\n        attr = input.selected_attribute() or \"bill_length_mm\"\n        fig = px.histogram(\n            df,\n            x=attr,\n            nbins=input.plotly_bin_count(),\n            title=f\"Distribution of {attr.replace('_', ' ')}\",\n            labels={attr: attr.replace(\"_\", \" \").title()},\n            color_discrete_map=color_discrete_map,\n        )\n        fig.update_layout(template=\"plotly_white\", showlegend=False)\n        return fig\n\n    # Histogram Plot 2\n    @render_plotly\n    def plot2():\n        df = filtered_data()\n        attr = input.selected_attribute() or \"flipper_length_mm\"\n        fig = px.histogram(\n            df,\n            x=attr,\n            nbins=input.plotly_bin_count(),\n            title=f\"Distribution of {attr.replace('_', ' ')}\",\n            labels={attr: attr.replace(\"_\", \" \").title()},\n            color_discrete_map=color_discrete_map,\n        )\n        fig.update_layout(template=\"plotly_white\", showlegend=False)\n        return fig\n\n    # Scatterplot\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Scatterplot: Species\")\n\n        @render_plotly\n        def plotly_scatterplot():\n            df = filtered_data()\n            fig = px.scatter(\n                df,\n                x=\"bill_length_mm\",\n                y=\"bill_depth_mm\",\n                color=\"species\",\n                title=\"Scatterplot by Species\",\n                labels={\n                    \"bill_length_mm\": \"Bill Length (mm)\",\n                    \"bill_depth_mm\": \"Bill Depth (mm)\",\n                },\n                color_discrete_map=color_discrete_map,\n            )\n            fig.update_layout(template=\"plotly_white\")\n            return fig\n\n    # DataTable\n    @render.data_frame\n    def render_penguins_df():\n        return filtered_data()\n\n    # Data Grid\n    @render.data_frame\n    def render_penguins_data_grid():\n        return filtered_data()\n\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n\n@reactive.calc\ndef filtered_data():\n    selected_species = input.selected_species()\n    selected_attribute = input.selected_attribute()\n\n# Filter the DataFrame based on the selected species\n    filtered_df = penguins_df[penguins_df[\"species\"].isin(selected_species)]\n\n# Additionally, if the selected attribute is not None and drop NA values for that column\n    if selected_attribute:\n        filtered_df = filtered_df.dropna(subset=[selected_attribute])\n\n    return filtered_df\n", "type": "text"}]